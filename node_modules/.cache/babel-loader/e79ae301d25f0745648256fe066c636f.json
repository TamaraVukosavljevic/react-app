{"ast":null,"code":"import Big from \"big.js\";\nimport operate from \"./operate\";\nimport isNumber from \"./isNumber\";\n/**\n * Given a button name and a calculator data object, return an updated\n * calculator data object.\n *\n * Calculator data object contains:\n *   total:String      the running total\n *   next:String       the next number to be operated on with the total\n *   operation:String  +, -, etc.\n */\n\nexport default function calculate(obj, buttonName) {\n  if (buttonName === \"AC\") {\n    return {\n      total: null,\n      next: null,\n      operation: null\n    };\n  } //ako je AC isprazniti ceo objekat\n\n\n  if (isNumber(buttonName)) {\n    if (buttonName === \"0\" && obj.next === \"0\") {\n      return {};\n    } //ako je nula onda vrati prazan objekat\n    //ako postoji operacija update-uj next\n\n\n    if (obj.operation) {\n      //ako postoji operacija +,-,*,:\n      if (obj.next) {\n        return {\n          next: obj.next + buttonName\n        }; //dodaj novi broj u next\n      }\n\n      return {\n        next: buttonName\n      }; //ako ne postoji next onda samo vrati operaciju\n    } //ako ne postoji operacija update-uj next sa novom cifrom\n\n\n    if (obj.next) {\n      const next = obj.next === \"0\" ? buttonName : obj.next + buttonName;\n      return {\n        next,\n        total: null\n      };\n    }\n\n    return {\n      next: buttonName,\n      total: null\n    };\n  }\n\n  if (buttonName === \"%\") {\n    if (obj.operation && obj.next) {\n      const result = operate(obj.total, obj.next, obj.operation);\n      return {\n        total: result.toString(),\n        next: null,\n        operation: null\n      };\n    }\n\n    if (obj.next) {\n      return {\n        next: obj.next.toString()\n      };\n    }\n\n    return {};\n  }\n\n  if (buttonName === \"=\") {\n    if (obj.next && obj.operation) {\n      return {\n        total: operate(obj.total, obj.next, obj.operation),\n        next: null,\n        operation: null\n      };\n    } else {\n      // '=' with no operation, nothing to do\n      return {};\n    }\n  }\n\n  if (buttonName === \"+/-\") {\n    if (obj.next) {\n      return {\n        next: (-1 * parseFloat(obj.next)).toString()\n      };\n    }\n\n    if (obj.total) {\n      return {\n        total: (-1 * parseFloat(obj.total)).toString()\n      };\n    }\n\n    return {};\n  } // Button must be an operation\n  // When the user presses an operation button without having entered\n  // a number first, do nothing.\n  // if (!obj.next && !obj.total) {\n  //   return {};\n  // }\n  // User pressed an operation button and there is an existing operation\n\n\n  if (obj.operation) {\n    return {\n      total: operate(obj.total, obj.next, obj.operation),\n      next: null,\n      operation: buttonName\n    };\n  } // no operation yet, but the user typed one\n  // The user hasn't typed a number yet, just save the operation\n\n\n  if (!obj.next) {\n    return {\n      operation: buttonName\n    };\n  } // save the operation and shift 'next' into 'total'\n\n\n  return {\n    total: obj.next,\n    next: null,\n    operation: buttonName\n  };\n}","map":{"version":3,"sources":["C:/Users/Lenovo/Documents/create-react-app-main/my-app/src/logic/calculate.js"],"names":["Big","operate","isNumber","calculate","obj","buttonName","total","next","operation","result","toString","parseFloat"],"mappings":"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","sourcesContent":["import Big from \"big.js\";\n\nimport operate from \"./operate\";\nimport isNumber from \"./isNumber\";\n\n/**\n * Given a button name and a calculator data object, return an updated\n * calculator data object.\n *\n * Calculator data object contains:\n *   total:String      the running total\n *   next:String       the next number to be operated on with the total\n *   operation:String  +, -, etc.\n */\nexport default function calculate(obj, buttonName) {\n  if (buttonName === \"AC\") {\n    return {\n      total: null,\n      next: null,\n      operation: null,\n    };\n  }\n  //ako je AC isprazniti ceo objekat\n\n  if (isNumber(buttonName)) {\n    if (buttonName === \"0\" && obj.next === \"0\") {\n      return {};\n    }\n    //ako je nula onda vrati prazan objekat\n    //ako postoji operacija update-uj next\n    if (obj.operation) {\n      //ako postoji operacija +,-,*,:\n      if (obj.next) {\n        return { next: obj.next + buttonName };\n        //dodaj novi broj u next\n      }\n      return { next: buttonName };\n      //ako ne postoji next onda samo vrati operaciju\n    }\n    //ako ne postoji operacija update-uj next sa novom cifrom\n    if (obj.next) {\n      const next = obj.next === \"0\" ? buttonName : obj.next + buttonName;\n      return {\n        next,\n        total: null,\n      };\n    }\n    return {\n      next: buttonName,\n      total: null,\n    };\n  }\n\n  if (buttonName === \"%\") {\n    if (obj.operation && obj.next) {\n      const result = operate(obj.total, obj.next, obj.operation);\n      return {\n        total: result\n          \n          .toString(),\n        next: null,\n        operation: null,\n      };\n    }\n    if (obj.next) {\n      return {\n        next: obj.next\n          .toString(),\n      };\n    }\n    return {};\n  }\n\n \n\n  if (buttonName === \"=\") {\n    if (obj.next && obj.operation) {\n      return {\n        total: operate(obj.total, obj.next, obj.operation),\n        next: null,\n        operation: null,\n      };\n    } else {\n      // '=' with no operation, nothing to do\n      return {};\n    }\n  }\n\n  if (buttonName === \"+/-\") {\n    if (obj.next) {\n      return { next: (-1 * parseFloat(obj.next)).toString() };\n    }\n    if (obj.total) {\n      return { total: (-1 * parseFloat(obj.total)).toString() };\n    }\n    return {};\n  }\n\n  // Button must be an operation\n\n  // When the user presses an operation button without having entered\n  // a number first, do nothing.\n  // if (!obj.next && !obj.total) {\n  //   return {};\n  // }\n\n  // User pressed an operation button and there is an existing operation\n  if (obj.operation) {\n    return {\n      total: operate(obj.total, obj.next, obj.operation),\n      next: null,\n      operation: buttonName,\n    };\n  }\n\n  // no operation yet, but the user typed one\n\n  // The user hasn't typed a number yet, just save the operation\n  if (!obj.next) {\n    return { operation: buttonName };\n  }\n\n  // save the operation and shift 'next' into 'total'\n  return {\n    total: obj.next,\n    next: null,\n    operation: buttonName,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}